package com.blamejared.crafttweaker.gametest.test.api.recipe.replacer;

import com.blamejared.crafttweaker.api.CraftTweakerAPI;
import com.blamejared.crafttweaker.gametest.CraftTweakerGameTest;
import com.blamejared.crafttweaker.gametest.framework.ScriptBuilder;
import com.blamejared.crafttweaker.gametest.framework.annotation.CraftTweakerGameTestHolder;
import com.blamejared.crafttweaker.gametest.framework.annotation.TestModifier;
import com.blamejared.crafttweaker.gametest.logging.appender.GameTestLoggerAppender;
import com.blamejared.crafttweaker.impl.recipe.replacement.ReplacerRegistry;
import com.blamejared.crafttweaker.impl.script.scriptrun.GameTestScriptRunner;
import net.minecraft.gametest.framework.GameTest;
import net.minecraft.gametest.framework.GameTestHelper;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.crafting.RecipeHolder;
import net.minecraft.world.item.crafting.RecipeManager;

import java.util.Optional;

import static org.hamcrest.MatcherAssert.assertThat;

@CraftTweakerGameTestHolder
public class ReplacerGameTests implements CraftTweakerGameTest {
    
    @GameTest(template = "crafttweaker:empty")
    @TestModifier(implicitSuccession = true)
    public void testReplacer(GameTestHelper helper, ScriptBuilder builder) {
        builder.file("recipe/replacer/basic_replacer.zs");
    
        GameTestLoggerAppender.QueryableLog log = GameTestScriptRunner.runScripts(helper, builder);
        log.assertNoErrors();
        log.assertNoWarnings();
    
        RecipeManager recipeManager = helper.getLevel().getServer().getRecipeManager();
        
        //Test that the recipes were indeed replaced
        Optional<RecipeHolder<?>> recipe = recipeManager.byKey(new ResourceLocation("crafttweaker:autogenerated/replacer/minecraft.diamond_boots.1"));
        boolean assertion = recipe.isPresent() && recipe.get().value().getIngredients().get(0).test(Items.APPLE.getDefaultInstance());
        assertThat("Replacer did not work", assertion);
    }
    
    @GameTest(template = "crafttweaker:empty")
    @TestModifier(implicitSuccession = true)
    public void testCustomFilteringRule(GameTestHelper helper, ScriptBuilder builder) {
        //Only replace the recipes that have more than 6 ingredients in them.
        //Most tools and diamond boots should not be replaced.
        builder.file("recipe/replacer/custom_filtering_rule.zs");
        
        GameTestLoggerAppender.QueryableLog log = GameTestScriptRunner.runScripts(helper, builder);
        log.assertNoErrors();
        log.assertNoWarnings();
        
        RecipeManager recipeManager = helper.getLevel().getServer().getRecipeManager();
        
        //Test that the recipes were indeed replaced
        Optional<RecipeHolder<?>> recipe = recipeManager.byKey(new ResourceLocation("crafttweaker:autogenerated/replacer/minecraft.diamond_block.1"));
        Optional<RecipeHolder<?>> unreplaced = recipeManager.byKey(new ResourceLocation("minecraft:diamond_boots"));
        boolean wasReplaced = recipe.isPresent() && recipe.get().value().getIngredients().get(0).test(Items.APPLE.getDefaultInstance());
        //Check that the replaced one was indeed replaced and that the other one was not
        assertThat("Custom filtering rule did not work", wasReplaced && unreplaced.isPresent());
    }
}
