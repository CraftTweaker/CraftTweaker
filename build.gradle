buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            url = 'https://dist.creeper.host/Sponge/maven'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}


apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: "com.matthewprenger.cursegradle"

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/22e7d543a18cd30675277fbfa3669e3d9e206010/generic/secrets.gradle'

import groovy.json.JsonOutput

if (project.hasProperty('secretFile')) {
    //noinspection GroovyAssignabilityCheck
    loadSecrets(new File((String) findProperty('secretFile')))
}

//apply from: rootProject.file('common.gradle')

subprojects {
    apply from: rootProject.file('common.gradle')
}

version = '7.1.0'
if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

group = 'com.blamejared.crafttweaker'
archivesBaseName = 'CraftTweaker-1.16.4'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

//Shuts up javadoc failures
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {
            options.tags += "docParam"
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url 'https://dogforce-games.com/maven'
    }
    maven {
        url = 'https://dist.creeper.host/Sponge/maven'
    }
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=crafttweaker.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            mods {
                crafttweaker {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=crafttweaker.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'


            mods {
                crafttweaker {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=crafttweaker.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                crafttweaker {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "crafttweaker.refmap.json"
}

def zenCodeDeps = [':CodeFormatter', ':CodeFormatterShared', ':JavaIntegration', ':JavaAnnotations', ':JavaBytecodeCompiler', ':JavaShared', ':Validator', ':Parser', ':CodeModel', ':Shared']


dependencies {
    compile project(":Crafttweaker_Annotations")
    annotationProcessor project(":Crafttweaker_Annotation_Processors")
    annotationProcessor 'org.spongepowered:mixin:0.8.1-SNAPSHOT:processor'

    zenCodeDeps.collect { compile project(it) }

    minecraft 'net.minecraftforge:forge:1.16.4-35.0.1'
//    compile fg.deobf("mezz.jei:jei-1.16.2:7.1.0.11")

    testCompile group: "org.junit.jupiter", name: "junit-jupiter", version: "5.4.2"
    testRuntime group: "org.junit.jupiter", name: "junit-jupiter", version: "5.4.2"
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}


task genGitChangelog() {
    def stdout = new ByteArrayOutputStream()
    // first commit to check from, in our case the first commit of the branch
    String firstCommit = "04c6fe182f7e88bdf0cbfbe1739d86ff3c0212f5"
    String repoLink = "https://github.com/CraftTweaker/CraftTweaker/commit/"
    // was having issues with grep and spaces in the regex
    exec {
        commandLine 'git', 'log', '-i', '--grep=version\\spush', '--grep=open\\sbeta\\sspecific\\scode', '--pretty=tformat:%H', '--date=local', firstCommit + '..@{0}'
        standardOutput = stdout
    }
    if (stdout.toString().trim().indexOf("\n") >= 0) {
        firstCommit = stdout.toString().split("\n")[0].trim()
    }
    System.out.println("Last version hash: \"" + firstCommit + "\"")
    stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '--pretty=tformat:- [%s](' + repoLink + '%H) - %aN - %cd', '--max-parents=1', '--date=local', firstCommit + "..@"
        standardOutput = stdout
    }
    File file = new File("changelog.md")
    file.write("### Current version: " + project.version)
    file.append("\n" + stdout.toString())
    System.out.println("Changelog generated!")
}

processResources {
    dependsOn(":StdLibs:zipItUp")
    from files(evaluationDependsOn(":StdLibs").tasks.getByName("zipItUp").outputs)
}

jar {
    dependsOn zenCodeDeps.collect { it + ":compileJava" }
    from files(zenCodeDeps.collect { project(it).sourceSets.main.output })

    dependsOn ":Crafttweaker_Annotation_Processors:compileJava"
    from project(":Crafttweaker_Annotations").sourceSets.main.output

    manifest {
        attributes([
                "Specification-Title"     : "crafttweaker",
                "Specification-Vendor"    : "CraftTweaker",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "CraftTweaker",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "crafttweaker.mixins.json"
        ])
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    from project(":Crafttweaker_Annotations").sourceSets.main.allSource
    from files(zenCodeDeps.collect { project(it).sourceSets.main.allSource })
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Creates a JAR containing the JavaDocs.'
    from javadoc.destinationDir
    from project(":Crafttweaker_Annotations").javadoc.destinationDir
    from files(zenCodeDeps.collect { project(it).javadoc.destinationDir })
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output
    from project(":Crafttweaker_Annotations").sourceSets.main.output
    from files(zenCodeDeps.collect { project(it).sourceSets.main.output })
    classifier = "deobf"
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

publish.dependsOn(project.tasks.getByName("assemble"))
publish.mustRunAfter(project.tasks.getByName("build"))

publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }

            artifact sourcesJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }

            artifact deobfJar {
                classifier 'deobf'
            }
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

curseforge {

    apiKey = findProperty('curseforge_api_token') ?: 0
    project {
        id = "239197"
        releaseType = 'beta'
        changelog = file("changelog.md")
        changelogType = 'markdown'

        mainArtifact(jar) {
            relations {
                requiredDependency "jeitweaker"
            }
        }
        addArtifact(deobfJar)
    }
}

task updateVersionTracker {

    onlyIf {

        project.hasProperty('versionTrackerAPI')
    }

    doLast {
        def body = [
                'author'        : "${project.findProperty('versionTrackerAuthor')}",
                'projectName'   : "crafttweaker",
                'gameVersion'   : "1.16.4",
                'projectVersion': "${version}",
                'homepage'      : "${project.findProperty('versionTrackerHomepage')}",
                'uid'           : "${project.findProperty('versionTrackerKey')}"
        ]

        // Opens a connection to the version tracker API and writes the payload JSON.
        def req = new URL(project.findProperty('versionTrackerAPI')).openConnection()
        req.setRequestMethod('POST')
        req.setRequestProperty('Content-Type', 'application/json; charset=UTF-8')
        req.setRequestProperty('User-Agent', "CraftTweaker Tracker Gradle")
        req.setDoOutput(true)
        req.getOutputStream().write(JsonOutput.toJson(body).getBytes("UTF-8"))

        // We need to attempt a read in order to actually send the message.
        println "VersionCheck Status code: ${req.getResponseCode()}"
        println "VersionCheck Response: ${req.getInputStream().getText()}"
    }

}

compileJava {
    //options.compilerArgs += ["-Xprefer:source", "-verbose"]
    //options.fork = true
    //options.forkOptions.executable = 'javac'
}

idea {
    module {
        excludeDirs += [file("run"), file("runServer")]
    }
}
