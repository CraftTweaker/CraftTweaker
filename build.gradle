buildscript {
    repositories {
        maven {
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            url = 'https://maven.blamejared.com'
        }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath group: 'com.blamejared', name: 'ModTemplate', version: '2.+', changing: true
    }
}
apply plugin: 'com.blamejared.modtemplate'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: "com.matthewprenger.cursegradle"

import com.blamejared.modtemplate.Utils

//apply from: rootProject.file('common.gradle')

subprojects {
    apply from: rootProject.file('common.gradle')
}

version = Utils.updatingVersion('7.1.2')

group = 'com.blamejared.crafttweaker'
archivesBaseName = 'CraftTweaker-1.16.5'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

//Shuts up javadoc failures
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {
            options.tags += "docParam"
            options.tags += "docEvent"
            options.tags += "docShortDescription"
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url 'https://dogforce-games.com/maven'
    }
    maven {
        url 'https://repo.spongepowered.org/repository/maven-public'
    }
    maven {
        url "https://www.cursemaven.com"
    }
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                crafttweaker {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run_server')
            arg "nogui"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                crafttweaker {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                crafttweaker {
                    source sourceSets.main
                }
            }
        }
    }
}


modTemplate {
    mcVersion "1.16.5"
    curseHomepage "https://www.curseforge.com/minecraft/mc-mods/crafttweaker"
    displayName "CraftTweaker"

    changelog {
        enabled true
        firstCommit "04c6fe182f7e88bdf0cbfbe1739d86ff3c0212f5"
        repo "https://github.com/CraftTweaker/CraftTweaker"
    }
    versionTracker {
        enabled true
        author "Jared"
        projectName "crafttweaker"
    }
    webhook {
        enabled true
        curseId "239197"
        avatarUrl "https://media.forgecdn.net/avatars/142/108/636546700830987709.png"
    }
}

def zenCodeDeps = [':CodeFormatter', ':CodeFormatterShared', ':JavaIntegration', ':JavaAnnotations', ':JavaBytecodeCompiler', ':JavaShared', ':Validator', ':Parser', ':CodeModel', ':Shared']
def zenCodeTestDeps = [':ScriptingExample']

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}
dependencies {
    library project(":Crafttweaker_Annotations")
    annotationProcessor project(":Crafttweaker_Annotation_Processors")

    zenCodeDeps.collect { implementation project(it) }

    minecraft 'net.minecraftforge:forge:1.16.5-36.2.26'
    implementation fg.deobf("mezz.jei:jei-1.16.4:7.6.1.65")

    testImplementation group: "org.junit.jupiter", name: "junit-jupiter", version: "5.6.2"
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter", version: "5.6.2"

    zenCodeTestDeps.collect { testImplementation(project(it).sourceSets.test.output) }
    testImplementation group: "org.assertj", name: "assertj-core", version: "3.19.0"
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

processResources {
    dependsOn(":StdLibs:zipItUp")
    from files(evaluationDependsOn(":StdLibs").tasks.getByName("zipItUp").outputs)
}

jar {
    dependsOn zenCodeDeps.collect { it + ":compileJava" }
    from files(zenCodeDeps.collect { project(it).sourceSets.main.output })

    dependsOn ":Crafttweaker_Annotation_Processors:compileJava"
    from project(":Crafttweaker_Annotations").sourceSets.main.output

    manifest {
        attributes([
                "Specification-Title"     : "crafttweaker",
                "Specification-Vendor"    : "CraftTweaker",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${archiveVersion}",
                "Implementation-Vendor"   : "CraftTweaker",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    from project(":Crafttweaker_Annotations").sourceSets.main.allSource
    from files(zenCodeDeps.collect { project(it).sourceSets.main.allSource })
    archiveClassifier.set("sources")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Creates a JAR containing the JavaDocs.'
    from javadoc.destinationDir
    from project(":Crafttweaker_Annotations").javadoc.destinationDir
    from files(zenCodeDeps.collect { project(it).javadoc.destinationDir })
    archiveClassifier.set("javadoc")
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publish.dependsOn(project.tasks.getByName("assemble"))
publish.mustRunAfter(project.tasks.getByName("build"))

publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }

            artifact sourcesJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }

        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {

    enabled = false
}

curseforge {

    apiKey = findProperty('curseforge_api_token') ?: 0
    project {
        id = "239197"
        releaseType = 'release'
        changelog = file("changelog.md")
        changelogType = 'markdown'
        addGameVersion '1.16.4'

        mainArtifact(jar) {
            relations {
                requiredDependency "jeitweaker"
            }
        }
    }
}

compileJava {
    options.compilerArgs << "-Acrafttweaker.processor.document.output_directory=${file('docsOut')}"
    //options.compilerArgs += ["-Xprefer:source", "-verbose"]
    //options.fork = true
    //options.forkOptions.executable = 'javac'
}

compileTestJava {
    //Suppresses the warning when using Unsafe in the UnsafeHelper class.
    options.fork = true // necessary to make -XDenableSunApiLintControl work
    options.compilerArgs << "-XDenableSunApiLintControl"
}

idea {
    module {
        excludeDirs += [file("run"), file("runServer")]
    }
}