buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.1.0'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'base' // To add "clean" task to the root project.
apply from: 'configuration.gradle'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/22e7d543a18cd30675277fbfa3669e3d9e206010/generic/secrets.gradle'


import com.diluv.schoomp.Webhook
import com.diluv.schoomp.message.Message
import com.diluv.schoomp.message.embed.Embed

if (project.hasProperty('secretFile')) {
    loadSecrets(new File((String) findProperty('secretFile')))
}

subprojects {
    apply from: rootProject.file('common.gradle')
}
repositories {
    mavenLocal()
    mavenCentral()
}

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
    gradleVersion = '4.9'
}

//Shuts up javadoc failures
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {

            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

task setupDecompWorkspaceAll(dependsOn: projects1120.collect { ':' + it + ':setupDecompWorkspace' }) {}

task setupCIWorkspaceAll(dependsOn: projects1120.collect { ':' + it + ':setupCIWorkspace' }) {}

task assembleMC1120(type: Jar, dependsOn: [\
		':ZenScript:build',
                                           ':CraftTweaker2-API:build']
        + projects1120.collect { ':' + it + ":build" }) {
    archiveName = "CraftTweaker2-1.12-${craftTweakerVersion}.jar"

    from zipTree(project(":ZenScript").jar.archivePath)
    from zipTree(project(':CraftTweaker2-API').jar.archivePath)
    manifest {
        attributes 'FMLAT': 'crafttweaker_at.cfg'
    }
    for (p in projects1120) {
        from zipTree(project(p).jar.archivePath)
    }
}

task assembleDevBase1120(type: Jar, dependsOn: [
        ':ZenScript:build',
        ':CraftTweaker2-API:build',
        ':CraftTweaker2-MC1120-Main:build']) {
    archiveName = "CraftTweaker2-Dev-1.12-${craftTweakerVersion}.jar"
    manifest {
        attributes 'FMLAT': 'crafttweaker_at.cfg'
    }
    from project(':ZenScript').sourceSets.main.output
    from project(':CraftTweaker2-API').sourceSets.main.output
    from project(':CraftTweaker2-MC1120-Main').sourceSets.main.output
}

task assembleDevFull1120(type: Jar, dependsOn: [
        ':ZenScript:build',
        ':CraftTweaker2-API:build']
        + projects1120.collect { ':' + it + ":build" }) {
    archiveName = "CraftTweaker2-Dev-Full-1.12-${craftTweakerVersion}.jar"

    from project(':ZenScript').sourceSets.main.output
    from project(':CraftTweaker2-API').sourceSets.main.output
    manifest {
        attributes 'FMLAT': 'crafttweaker_at.cfg'
    }
    for (p in projects1120) {
        from project(p).sourceSets.main.output
    }
}


task assembleAll(dependsOn: [
        assembleMC1120,
        assembleDevBase1120,
        assembleDevFull1120

]) {
}

def CrtBuildGroup = "CraftTweaker Build"
def CrtSetupGroup = "CraftTweaker Setup"
setupDecompWorkspaceAll.group = CrtSetupGroup
setupCIWorkspaceAll.group = CrtSetupGroup

assembleAll.group = CrtBuildGroup

assembleMC1120.group = CrtBuildGroup
assembleDevBase1120.group = CrtBuildGroup
assembleDevFull1120.group = CrtBuildGroup

artifacts {
    archives assembleMC1120
}

task genGitChangelog() {
    def stdout = new ByteArrayOutputStream()
    // first commit to check from, in our case the first commit of the branch
    String firstCommit = 'fc284aa2f3299408c40ee68ed1dbfbff330b7e5f';
    String repoLink = "https://github.com/CraftTweaker/CraftTweaker/commit/"
    // was having issues with grep and spaces in the regex
    exec {
        commandLine 'git', 'log', '-i', '--grep=version\\spush', '--grep=open\\sbeta\\sspecific\\scode', '--pretty=tformat:%H', '--date=local', firstCommit + '..@{0}'
        standardOutput = stdout
    }
    if (stdout.toString().trim().indexOf("\n") >= 0) {
        firstCommit = stdout.toString().split("\n")[0].trim();
    }
    System.out.println("Last version hash: \"" + firstCommit + "\"");
    stdout = new ByteArrayOutputStream()
    def test = exec {
        commandLine 'git', 'log', '--pretty=tformat:- [%s](' + repoLink + '%H) - %aN - %cd', '--max-parents=1', '--date=local', firstCommit + "..@"
        standardOutput = stdout
    }
    File file = new File("changelog.md")
    file.write("### Current version: " + project.version)
    file.append("\n" + stdout.toString())
    System.out.println("Changelog generated!")
}

curseforge {
    apiKey = findProperty('curseforge_api_token') ?: 0
    project {
        id = "239197"
        releaseType = 'release'
        changelog = file("changelog.md")
        changelogType = 'markdown'
        addGameVersion '1.12.2'

        mainArtifact assembleMC1120
    }
}

tasks.getByName("curseforge").doLast {

    try {
        def name = project.findProperty('name')
        def mcVersion = "1.12.2"
        def cursePage = "https://www.curseforge.com/minecraft/mc-mods/crafttweaker"
        def curseProject = "239197"
        // Reads the file ID given to us by CurseForge
        def newFileId = tasks.getByName("curseforge${curseProject}").property('mainArtifact').fileID

        def webhook = new Webhook(findProperty('discordCFWebhook'), "${name} Gradle Upload")

        def message = new Message()
        message.setUsername(name)
        message.setContent("${name} ${craftTweakerVersion} for Minecraft ${mcVersion} has been released! The download will be available soon.")

        def embed = new Embed()
        embed.addField('Download', "${cursePage}/files/$newFileId", false)
        embed.addField('Change Log', "${getCIChangelog() ?: 'Unavailable'}", false)

        embed.setColor(0xF16436)
        message.addEmbed(embed)
        message.setAvatarUrl("https://media.forgecdn.net/avatars/142/108/636546700830987709.png")
        webhook.sendMessage(message)
    }

    catch (IOException e) {
        println 'Failed to push to the Discord webhook.'
    }
}

def getCIChangelog() {
    // This method handles getting short changelogs from Jenkins itself instead of long changelogs
    String repoLink = "https://github.com/CraftTweaker/CraftTweaker/commit/"
    try {
        def stdout = new ByteArrayOutputStream()
        def gitHash = System.getenv('GIT_COMMIT')
        def gitPrevHash = System.getenv('GIT_PREVIOUS_COMMIT')
        if(gitHash && gitPrevHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:- [%s](' + repoLink + '%H) - %aN ', '' + gitPrevHash + '...' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().trim()
        }
        else if (gitHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:- [%s](' + repoLink + '%H) - %aN', '-1', '' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else {
            return "";
        }
    } catch(ignored) {
        return "";
    }
}
